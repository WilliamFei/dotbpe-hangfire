syntax = "proto3";
package dotbpe;

option csharp_namespace = "Hangfire.Producer";
option optimize_for = SPEED;



import public "dotbpe_option.proto";

option (generic_objectfactory) = true;
option (generic_http_api_routes) = true; //生成路由配置信息


service TaskProducerService{

    option (service_id)= 1000 ;//设定服务ID

    // 队列任务
    rpc Enqueue (EnqueueReq) returns (VoidRes){
        option (message_id)= 1 ;//设定消息ID

        option (http_api_option) = {
            path : "/api/task/enqueue",
            method : "all",
            description : "队列任务"
        };
    };

    // 延迟任务，延迟单位分钟
    rpc Schedule (ScheduleReq) returns (VoidRes){
        option (message_id)= 2 ; //设定消息ID

        option (http_api_option) = {
            path :"/api/task/schedule",
            method : "all",
            description : "延迟任务，延迟单位分钟"
        };
    };

    // 延迟任务，延迟单位为秒，其实是不准的
    rpc ScheduleSecond (ScheduleReq) returns (VoidRes){
        option (message_id)= 3 ; //设定消息ID

        option (http_api_option) = {
            path : "/api/task/schedule/second",
            method : "all",
            description : "延迟任务，延迟单位为秒，其实是不准的"
        };
    };
    
}

message EnqueueReq{
    string client_ip = 1; //用户端IP  
    string x_request_id = 3 ; //请求的唯一标识，用于服务间传递
    
    int32 service_id = 10; // 服务ID
    int32 message_id = 11; // 消息ID
    string data = 12;   //数据JSON 应该尽量少的传递数据，必要时可以传递ID，在实际执行是去获取数据
}

message ScheduleReq{
    string client_ip = 1; //用户端IP
    string x_request_id = 3 ; //请求的唯一标识，用于服务间传递
    
    int32 service_id = 10; // 服务ID
    int32 message_id = 11; // 消息ID
    int32 delay = 12; //延迟的单位
    string data = 13;   //数据JSON 应该尽量少的传递数据，必要时可以传递ID，在实际执行是去获取数据   
}

message CommonReq{
    string job_id = 1 ; //任务ID

    int32 service_id = 10; // 服务ID
    int32 message_id = 11; // 消息ID
    string data = 12;   //数据JSON 应该尽量少的传递数据，必要时可以传递ID，在实际执行是去获取数据
}

message VoidRes{
    string return_message = 1 ;
}

